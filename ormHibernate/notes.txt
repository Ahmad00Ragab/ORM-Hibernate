" ORM NOTES "

What is ORM?
It is a programing technique that enables the application that is written in OOP to deal with the database with Objects. Specifically ORM is used in mapping the classes in programming language like Java to a table in a relational database like MySQL.

What is the meaning of that: ORM Enables the concept of abstraction?
ORM abstract database layer, so don’t need to write SQL queries.

What is the meaning of the associative entities in JPA?
In JPA (java persistence API), associative entities are entities that have relationships to each other represent in the object model.
These relationships are established using the annotation in JPA.

What is the meaning of entities?
Entity refers to a table inside the database and is represented in the JPA with a class.

What are the types of associative entities?
1. one to one
2. one to many
3. many to many 

What are the fetching strategies?
In JPA (java persistence API), fetching strategies determine how and when the associated entities are loaded from the database. 

What are the types of fetching strategies?
1. Eager strategy
2. Lazy  strategy

Why we use persistence.xml file in our project?
Because we need to configure the connection with the database and also it contains the configuration for the persistence unit inside our project.

What is the concept of ‘persistence’ in java frameworks and APIs like JPA and Hibernate?
Java Persistence Frameworks are a set of tools and libraries that gives the developer the ability to (store, retrieve and manage) data of a relational database with a java application.
These frameworks simplify the process of interaction with the database  make it in OOP concepts like the regular ones 

What is the difference between API and Framework?
API: a set of rules, protocols and tools that handles the communications between software components. Ex. JDBC  handles the communication between the java app and the database.

Framework: it is a collection of tools libraries and best practices that provide a way to for program structuring.  Ex. Spring Framework



What is Persistence Context?
It is a set of entity instances that are managed by Entity manager, and it represents the first level-cache where the entity instances are stored.

What is JPA, Hibernate, Jakararta?
JPA          : Java Persistence API , a specification for how to use the ORM Concepts 
Hibernate    : a framework that is based on the concept of ORM and it is the implementation of JPA
Jakarata     : it is the umbrella project that contains the Jakarta persistence specifications 


What is Jackarta EE?
it is the EnterPrise Edition of JAVA. (user for large scale application)
it is a set of APIs and tools that provides the functionality for building large scale enterprise applications.

which is faster, Hibernate or JDBC?
it depends on the complexity of the query and the size of the data. 
Hibernate is faster when the query is complex and the data is large. JDBC is faster when the query is simple and the data is small.


which is thread-safe and which is not : EntityManagerFactory  and EntityManager?
EntityManagerFactory : it is thread-safe. 
EntityManager        : it is not thread-safe.

what is the purpose of EntityManagerFactory?
it is a heavy weight object that is needed to be created once only in the application.
we use it to get the EntityManager instance. and setup the database connection and configuration.
it is a singleton object.

What is the purpose of EntityManager?
it is a light weight object that is needed to be created for each transaction.
we use it to perform crud operations [(persist=Create),(find=Read),(merge=Update),(remove=Delete)]

what do you know about the concept of ‘detached’ entity?
A detached entity is an entity that is no longer associated with the persistence context. 
It is an entity that has been removed from the persistence context and is no longer managed by the entity manager.

what does make the entity enters the 'detached' state?
1. when the entity is removed from the persistence context.
2. when the entity manger is closed 
3. when the entity is detached explicitly using the detach() method of the entity manager.

What are the Entity states in its life-cycle?
1. new (Transient)      : when it you create and instance of the entity but it is not associated with the persistence context.
2. managed (persistent) : when it is associated with a persistent context and is managed by the entity manager. (find(), persist())
3. detached             : when the entity is no longer associated with any persistence context. (detach(),em.close())
4. removed (or deleted) : when the entity is removed from the persistence context. (remove())

how to  reattach a ‘detached’ entity?
by using .merge() method.

what is the concept of the first-level of cache of Hibernate?
the first-level of cache is the persistence context which contains the instances of entities managed by the entity manager
in the current transaction, 
- This is a feature of Hibernate’s first-level cache (or persistence context),
which avoids unnecessary database queries for entities that are already tracked within the current transaction.

What does em.merge() do?
it re attach a 'detached' entity, which means inserting it again in the persistence consist after the modifications done on it.
also we can use it to create an instance that is not existed in the datbase.
ex : 
em.getTransaction().begin();
Product product = new Product();
product.setId(1);
product.setName("product1");
em.merge(product); // here is inside the persist context and marked for (creation or update (didn't know till now))
em.getTransaction().commit; // checks if the a product with id=1 exists, if yes it will update it, if not it will insert it as a new one.

when the data is inserted in the database?
it is inserted in the database, when the transaction is only is committed or flushed.
other than this , every thing is marked in the persistence context which is a mirror to the datbase.

what is the difference between the flush() and commit() methods?
The flush() method is used to synchronize the persistence context with the database, 
whereas the commit() method is used to end the current transaction and make the changes permanent.


what is the difference betwen em.find() and em.getReference()?
find()         : loads the entity with its data 
getReference() : loads the entity but not its data, it is a proxy to the entity, loads the data when it is first accessed (lazy loading)


what is em.refresh()?
it is used to referesh or overwrite the current state of the entity with with version existed in the database. (make them equal)

what is the difference between those two lines that are existed in the persistence.xml file?
<property name="hibernate.hbm2ddl.auto" value="update"/>
<property name="jakarta.persistence.schema-generation.database.action" value="drop-and-create"/>
both are use to control the schema of the database at application startup,
first one is for hibernate and the second one is for jakarta persistence. and we should use only one of them.


what do you know about thread Local pattern?
The ThreadLocal pattern is a design pattern in Java that uses the ThreadLocal class to store data (Like EntityManager) that is unique to each thread
and is not shared with other threads. This ensures each request has its own EntityManager instance.


what is JPQL?
stands for Java Persistence Query Lanaguage which is a query language that is used to query the entities from the Persistence Context
rather than query the databae tables direclty using SQL,  this makes it agnostic to any database.


what are the ways of parameter binding?
1. use named parameters      [:name]    : 
String stringQuery = "from User u where u.name like :name";
Query q = em.createQuery(stringQuery).setParameter("name", ahmad);
2. use positional parameters [ ?1 ]      :
String stringQuery = "from User u where u.name like ?1";
Query q = em.createQuery(stringQuery).setParameter(1, ahmad);

and for both : 
List<User> resultSet = q.getResultSet();



what is Criteria API and what is the difference between it and JPQL?
Criteria API  is a way to create the Query with SQL injection or the concatenation of the Strings to create the query.
provides you with some apis to build a complex query with multiple choices or filters.

- als Criteria API is an alternative to using JPQL (Java Persistence Query Language) to create queries. 
The Criteria API allows for dynamic query creation, making it particularly useful when you 
need to build complex or dynamic queries at runtime.

what is Entity Graph?
it is an optimization for the lazy loading of the entity, it is a way to specify which fields 
of the entity should be loaded (lazily) and which fields of the entity should loaded (eagerly) and all this on a per-query basis
it is used to reduce the number of database queries.

what are the types of Entity Graphs that we define?
1. fetch Graph  : this is the default graph, it is used to fetch all the fields that is defined in the graph and left the other to be lazy loaded.
2. load  Graph  : it is used to fetch all the fields in the graph eagrly and left the other to their behavior.


in a repo method, like 
@Query("SELECT p FROM Product p WHERE " +
         "(:categoryId IS NULL OR p.category.id = :categoryId) AND " +
         "((:brands IS NULL OR p.brand IN :brands) OR " +
         "(:materials IS NULL OR p.material IN :materials) OR " +
         "(p.price BETWEEN :minPrice AND :maxPrice)) AND" +
         "(p.isDeleted = false)")
Page<Product> findByFilters(
         @Param("categoryId") Integer categoryId,
         @Param("brands") List<String> brands,
         @Param("materials") List<String> materials,
         @Param("minPrice") Float minPrice,
         @Param("maxPrice") Float maxPrice,
         Pageable pageable
);, 

if i would like to convert it from Nammed parameter to positional parameter for parameter binding?
I would change the code to be like this:
@Query("SELECT p FROM Product p WHERE (?1 IS NULL OR p.category.id = ?1) " +
       "AND (?2 IS NULL OR p.brand IN ?2) " +
       "AND (?3 IS NULL OR p.material IN ?3) " +
       "AND (p.price BETWEEN ?4 AND ?5) " +
       "AND (p.isDeleted = false)")
Page<Product> findByFilters(
        Integer categoryId,
        List<String> brands,
        List<String> materials,
        Float minPrice,
        Float maxPrice,
        Pageable pageable
);

- Positional parameters are referenced by their position in the method parameter list.
- They must appear in the order in which the method parameters are declared.